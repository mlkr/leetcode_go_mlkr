package problem36

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

type para struct {
	one [][]byte
}

type ans struct {
	one bool
}

type question struct {
	p para
	a ans
}

func Test_isValidSudoku(t *testing.T) {
	ast := assert.New(t)

	qs := []question{
		question{
			p: para{
				[][]byte{
					{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
					{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
					{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
					{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
					{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
					{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
					{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
					{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
					{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
				},
			},
			a: ans{
				true,
			},
		},
		question{
			p: para{
				[][]byte{
					{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
					{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
					{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
					{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
					{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
					{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
					{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
					{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
					{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
				},
			},
			a: ans{
				false,
			},
		},
		question{
			p: para{
				[][]byte{
					{'.', '.', '4', '.', '.', '.', '6', '3', '.'},
					{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
					{'5', '.', '.', '.', '.', '.', '.', '9', '.'},
					{'.', '.', '.', '5', '6', '.', '.', '.', '.'},
					{'4', '.', '3', '.', '.', '.', '.', '.', '1'},
					{'.', '.', '.', '7', '.', '.', '.', '.', '.'},
					{'.', '.', '.', '5', '.', '.', '.', '.', '.'},
					{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
					{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				},
			},
			a: ans{
				false,
			},
		},
		question{
			p: para{
				[][]byte{
					{'.', '.', '.', '.', '5', '.', '.', '1', '.'},
					{'.', '4', '.', '3', '.', '.', '.', '.', '.'},
					{'.', '.', '.', '.', '.', '3', '.', '.', '1'},
					{'8', '.', '.', '.', '.', '.', '.', '2', '.'},
					{'.', '.', '2', '.', '7', '.', '.', '.', '.'},
					{'.', '1', '5', '.', '.', '.', '.', '.', '.'},
					{'.', '.', '.', '.', '.', '2', '.', '.', '.'},
					{'.', '2', '.', '9', '.', '.', '.', '.', '.'},
					{'.', '.', '4', '.', '.', '.', '.', '.', '.'},
				},
			},
			a: ans{
				false,
			},
		},
	}

	for _, q := range qs {
		a, p := q.a, q.p
		ast.Equal(a.one, isValidSudoku(p.one), "输入: %v", p)
	}
}
